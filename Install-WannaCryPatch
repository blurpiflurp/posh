#Version 1.08.00 @KieranWalsh May 2017
# Computer Talk LTD

# Heavily modified by github.com/oitptobbe

# Thanks to https://github.com/TLaborde, and https://www.facebook.com/BlackV for notifying me about missing patches.

function Install-WannaCryPatch {
    param($computer,$cred)
    [String]$TaskName = "PSWindowsUpdate"
    [Scriptblock]$scriptblock = {
        $Criteria = "IsInstalled=0";
        $Searcher = New-Object -ComObject Microsoft.Update.Searcher;
        $Patches = @('4012212', '4012213', '4012214', '4012215', '4012216', '4012217', '4012598', '4013429', '4015217', '4015438', '4015549', '4015550', '4015551', '4015552', '4015553', '4016635', '4019215', '4019216', '4019264', '4019472');
        $SearchResult = $Searcher.Search($Criteria).Updates;
        if ($SearchResult.Count -eq 0) {
            Write-Output "There are no applicable updates.";
            exit;
        } 
        else {
            $updateToInstall = new-object -comobj "Microsoft.Update.UpdateColl";
            $i = 0;
            while($i -lt $searchresult.count-1) {
                foreach($kb in $patches) {
                    if($searchresult.item($i).kbarticleids -ne $null -and $kb -eq $SearchResult.item($i).kbarticleids) {
                        $updateToInstall.add($SearchResult.item($i));
                        write-host "I want to download and install $($searchresult.item($i).title)";
                    }
                }
                $i++;
            }
            if($updateToInstall.count -gt 0) {
                $Session = New-Object -ComObject Microsoft.Update.Session;
                $Downloader = $Session.CreateUpdateDownloader();
                $Downloader.Updates = $updateToInstall;
                $Downloader.Download();
                $Installer = New-Object -ComObject Microsoft.Update.Installer;
                $Installer.Updates = $updateToInstall;
                $Result = $Installer.Install();
            }
        }
    }
	$Scheduler = New-Object -ComObject Schedule.Service
	$Task = $Scheduler.NewTask(0)

	$RegistrationInfo = $Task.RegistrationInfo
	$RegistrationInfo.Description = $TaskName
	$RegistrationInfo.Author = $User.Name

	$Settings = $Task.Settings
	$Settings.Enabled = $True
	$Settings.StartWhenAvailable = $True
	$Settings.Hidden = $False

	$Action = $Task.Actions.Create(0)
	$Action.Path = "powershell"
	$Action.Arguments = "-Command $ScriptBlock"
		
	$Task.Principal.RunLevel = 1	
	foreach($comp in $computer) {
        $Scheduler.Connect($comp)
		$RootFolder = $Scheduler.GetFolder("\")
		$SendFlag = 1
		if($Scheduler.GetRunningTasks(0) | Where-Object {$_.Name -eq $TaskName})
		{
			$CurrentTask = $RootFolder.GetTask($TaskName)
			$Title = "Task $TaskName is curretly running: $($CurrentTask.Definition.Actions | Select-Object -exp Path) $($CurrentTask.Definition.Actions | Select-Object -exp Arguments)"
			$Message = "What do you want to do?"

			$ChoiceContiniue = New-Object System.Management.Automation.Host.ChoiceDescription "&Continue Current Task"
			$ChoiceStart = New-Object System.Management.Automation.Host.ChoiceDescription "Stop and Start &New Task"
			$ChoiceStop = New-Object System.Management.Automation.Host.ChoiceDescription "&Stop Task"
			$Options = [System.Management.Automation.Host.ChoiceDescription[]]($ChoiceContiniue, $ChoiceStart, $ChoiceStop)
			$SendFlag = $host.ui.PromptForChoice($Title, $Message, $Options, 0)
					
			if($SendFlag -ge 1)
			{
				($RootFolder.GetTask($TaskName)).Stop(0)
			} #End If $SendFlag -eq 1	
						
		} #End If !($Scheduler.GetRunningTasks(0) | Where-Object {$_.Name -eq $TaskName})
						
		if($SendFlag -eq 1)
		{
			$RootFolder.RegisterTaskDefinition($TaskName, $Task, 6, "SYSTEM", $Null, 1) | Out-Null
			$RootFolder.GetTask($TaskName).Run(0) | Out-Null
		} #End If $SendFlag -eq 1
    }    
}

$Patches = @('KB4012212', 'KB4012213', 'KB4012214', 'KB4012215', 'KB4012216', 'KB4012217', 'KB4012598', 'KB4013429', 'KB4015217', 'KB4015438', 'KB4015549', 'KB4015550', 'KB4015551', 'KB4015552', 'KB4015553', 'KB4016635', 'KB4019215', 'KB4019216', 'KB4019264', 'KB4019472')

$WindowsComputers = (Get-ADComputer -Filter {
    (OperatingSystem  -Like 'Windows Server*') -and (OperatingSystem -notlike '*Windows 10*') -and (OperatingSystem -notlike '*Windows Server 2016*')
}).Name|
Sort-Object

$hotfixes = Invoke-Command -ComputerName $WindowsComputers -ScriptBlock {Get-HotFix}
$installed=@()
foreach($kb in $Patches) {
    $installed += $hotfixes|where HotFixID -contains $kb
}
$instcomp = $installed|select -ExpandProperty PSComputerName -Unique
$notpatched = Compare-Object -ReferenceObject $instcomp -DifferenceObject $WindowsComputers -PassThru

Install-WannaCryPatch -computer $notpatched
